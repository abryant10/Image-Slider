(()=>{"use strict";var n,t,e,o,r,i,a,c,s,l,A,d,u,p,f={426:(n,t,e)=>{e.d(t,{Z:()=>c});var o=e(15),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([n.id,"html { \n  font-family: Arial, Helvetica, sans-serif;\n  height: 100%;\n}\n.imageSliderContainer {\n  margin: auto;\n  height: 500px;\n  width: 900px;\n  position: relative;\n  background-color: rgb(255, 255, 255);\n  overflow: hidden;\n}\n.navContainer {\n  background-color: transparent;\n  height: 40px;\n  position: absolute; \n  display: flex;\n  bottom: 10px;\n  margin-left: 50%;\n}\n.photo {\n   object-fit: cover;\n   width: 900px;\n   height: 5 00px;\n}\n.hiddenPhoto {\n  display: none;\n}\n.centerPhoto {\n  position: absolute;\n  left: 0;\n  top: 0px;\n  transition: left 1s;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden\n}\n.leftPhoto {\n  display: block;\n  position: absolute;\n  left: -900px;\n  top: 0px;\n  transition: left 1s;\n}\n.rightPhoto {\n  display: block;\n  position: absolute;\n  left: 900px;\n  top: 0px;\n  transition: left 1s;\n}\n.emptyCircle {\n  width: 15px;\n  height: 15px;\n  border-radius: 50px;\n  background-color: rgba(105, 105, 105, 0.7);\n  margin-right: 10px;\n  z-index: 1;\n}\n.emptyCircle:hover {\n  background-color: rgb(177, 177, 177);\n  cursor: pointer;\n}\n.filledCircle {\n  background-color: rgb(177, 177, 177);\n  z-index: 1;\n}\n.leftButton {\n  width: 50px;\n  height: 50px;\n  color: white;\n  background-color: rgba(105, 105, 105, 0.7);\n  position: absolute;\n  bottom: 50%;\n  font-size: 40px;\n  text-align: center;\n  z-index: 1;\n}\n.leftButton:hover {\n  cursor: pointer;\n  background-color:rgba(46, 46, 46, 0.7);\n}\n.rightButton {\n  width: 50px;\n  height: 50px;\n  color: white;\n  background-color: rgba(105, 105, 105, 0.7);\n  position: absolute;\n  bottom: 50%;\n  right: 0px;\n  font-size: 40px;\n  text-align: center;\n  z-index: 1;\n}\n.rightButton:hover {\n  cursor: pointer;\n  background-color:rgba(46, 46, 46, 0.7);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,YAAY;EACZ,kBAAkB;EAClB,oCAAoC;EACpC,gBAAgB;AAClB;AACA;EACE,6BAA6B;EAC7B,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,gBAAgB;AAClB;AACA;GACG,iBAAiB;GACjB,YAAY;GACZ,cAAc;AACjB;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,OAAO;EACP,QAAQ;EACR,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB;AACF;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,QAAQ;EACR,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,QAAQ;EACR,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,0CAA0C;EAC1C,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,oCAAoC;EACpC,eAAe;AACjB;AACA;EACE,oCAAoC;EACpC,UAAU;AACZ;AACA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,0CAA0C;EAC1C,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,eAAe;EACf,sCAAsC;AACxC;AACA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,0CAA0C;EAC1C,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,eAAe;EACf,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,eAAe;EACf,sCAAsC;AACxC",sourcesContent:["html { \n  font-family: Arial, Helvetica, sans-serif;\n  height: 100%;\n}\n.imageSliderContainer {\n  margin: auto;\n  height: 500px;\n  width: 900px;\n  position: relative;\n  background-color: rgb(255, 255, 255);\n  overflow: hidden;\n}\n.navContainer {\n  background-color: transparent;\n  height: 40px;\n  position: absolute; \n  display: flex;\n  bottom: 10px;\n  margin-left: 50%;\n}\n.photo {\n   object-fit: cover;\n   width: 900px;\n   height: 5 00px;\n}\n.hiddenPhoto {\n  display: none;\n}\n.centerPhoto {\n  position: absolute;\n  left: 0;\n  top: 0px;\n  transition: left 1s;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden\n}\n.leftPhoto {\n  display: block;\n  position: absolute;\n  left: -900px;\n  top: 0px;\n  transition: left 1s;\n}\n.rightPhoto {\n  display: block;\n  position: absolute;\n  left: 900px;\n  top: 0px;\n  transition: left 1s;\n}\n.emptyCircle {\n  width: 15px;\n  height: 15px;\n  border-radius: 50px;\n  background-color: rgba(105, 105, 105, 0.7);\n  margin-right: 10px;\n  z-index: 1;\n}\n.emptyCircle:hover {\n  background-color: rgb(177, 177, 177);\n  cursor: pointer;\n}\n.filledCircle {\n  background-color: rgb(177, 177, 177);\n  z-index: 1;\n}\n.leftButton {\n  width: 50px;\n  height: 50px;\n  color: white;\n  background-color: rgba(105, 105, 105, 0.7);\n  position: absolute;\n  bottom: 50%;\n  font-size: 40px;\n  text-align: center;\n  z-index: 1;\n}\n.leftButton:hover {\n  cursor: pointer;\n  background-color:rgba(46, 46, 46, 0.7);\n}\n.rightButton {\n  width: 50px;\n  height: 50px;\n  color: white;\n  background-color: rgba(105, 105, 105, 0.7);\n  position: absolute;\n  bottom: 50%;\n  right: 0px;\n  font-size: 40px;\n  text-align: center;\n  z-index: 1;\n}\n.rightButton:hover {\n  cursor: pointer;\n  background-color:rgba(46, 46, 46, 0.7);\n}\n"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);o&&r[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=new Array(t);e<t;e++)o[e]=n[e];return o}n.exports=function(n){var e,o,r=(o=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var o,r,i=[],a=!0,c=!1;try{for(e=e.call(n);!(a=(o=e.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(n){c=!0,r=n}finally{try{a||null==e.return||e.return()}finally{if(c)throw r}}return i}}(e,o)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(n,e):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if(!a)return i;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),A=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],l=o.base?s[0]+o.base:s[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var u=e(d),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(t[u].references++,t[u].updater(p)):t.push({identifier:d,updater:r(p,o),references:1}),a.push(d)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=e(i[a]);t[c].references--}for(var s=o(n,r),l=0;l<i.length;l++){var A=e(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=s}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o=e.css,r=e.media,i=e.sourceMap;r?n.setAttribute("media",r):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},719:(n,t,e)=>{n.exports=e.p+"3adfea337e10faf106a1.JPG"},553:(n,t,e)=>{n.exports=e.p+"25531736eb4384228385.JPG"},284:(n,t,e)=>{n.exports=e.p+"666e3fe2f5ceb91eee6a.JPG"},953:(n,t,e)=>{n.exports=e.p+"a5e5cee88321c31d78cc.JPG"}},h={};function C(n){var t=h[n];if(void 0!==t)return t.exports;var e=h[n]={id:n,exports:{}};return f[n](e,e.exports,C),e.exports}C.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return C.d(t,{a:t}),t},C.d=(n,t)=>{for(var e in t)C.o(t,e)&&!C.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},C.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),C.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;C.g.importScripts&&(n=C.g.location+"");var t=C.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),C.p=n})(),n=C(379),t=C.n(n),e=C(795),o=C.n(e),r=C(569),i=C.n(r),a=C(565),c=C.n(a),s=C(216),l=C.n(s),A=C(589),d=C.n(A),u=C(426),(p={}).styleTagTransform=d(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=l(),t()(u.Z,p),u.Z&&u.Z.locals&&u.Z.locals,function(n){const t=document.getElementById("imageSliderContainer"),e=n.length;let o=0,r=1,i=e-1;const a=document.createElement("div");a.classList.add("navContainer"),t.appendChild(a);const c=function(n){let t=parseInt(n.target.dataset.circle,10);if(t!==o)if(o<t){let n=t-o;for(let t=0;t<n;t+=1)setTimeout(d,500*t)}else{let n=o-t;for(let t=0;t<n;t+=1)setTimeout(u,500*t)}};for(let n=0;n<e;n+=1){const t=document.createElement("div");t.classList.add("emptyCircle"),t.id=`circle${n}`,t.dataset.circle=n,a.appendChild(t),t.addEventListener("click",c)}const s=document.createElement("div");s.classList.add("leftButton"),s.innerHTML="&#10094;";const l=document.createElement("div");l.classList.add("rightButton"),l.innerHTML="&#10095;",t.appendChild(s),t.appendChild(l),n.forEach((e=>{const o=document.createElement("div");o.classList.add("hiddenPhoto"),o.id=`photo${parseInt(n.indexOf(e))}`;const r=document.createElement("img");r.src=e,r.classList.add("photo"),o.appendChild(r),t.appendChild(o)}));const A=function(){f=document.getElementById(`photo${i}`),p=document.getElementById(`photo${o}`),h=document.getElementById(`photo${r}`),C=document.getElementById(`circle${o}`)},d=function n(){m(),p.classList.add("leftPhoto"),h.classList.add("centerPhoto"),p.classList.remove("centerPhoto"),h.classList.remove("rightPhoto"),f.classList.remove("leftPhoto"),C.classList.remove("filledCircle"),o+=1,o>=e&&(o=0),i+=1,i>=e&&(i=0),r+=1,r>=e&&(r=0),A(),C.classList.add("filledCircle"),h.classList.add("rightPhoto"),g=setInterval(n,5e3)},u=function(){m(),p.classList.add("rightPhoto"),f.classList.add("centerPhoto"),p.classList.remove("centerPhoto"),f.classList.remove("leftPhoto"),h.classList.remove("rightPhoto"),C.classList.remove("filledCircle"),o-=1,o<0&&(o=e-1),i-=1,i<0&&(i=e-1),r-=1,r<0&&(r=e-1),A(),C.classList.add("filledCircle"),f.classList.add("leftPhoto"),g=setInterval(d,5e3)};l.addEventListener("click",d),s.addEventListener("click",u);let p=document.getElementById("photo0");p.classList.add("centerPhoto");let f=document.getElementById("photo"+(e-1));f.classList.add("leftPhoto");let h=document.getElementById("photo1");h.classList.add("rightPhoto");let C=document.getElementById(`circle${o}`);C.classList.add("filledCircle");var g=setInterval(d,5e3);const m=function(){clearInterval(g)}}([C(719),C(553),C(953),C(284)])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vaW1hZ2Utc2xpZGVyLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vaW1hZ2Utc2xpZGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vaW1hZ2Utc2xpZGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vaW1hZ2Utc2xpZGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ltYWdlLXNsaWRlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2ltYWdlLXNsaWRlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ltYWdlLXNsaWRlci93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9pbWFnZS1zbGlkZXIvLi9zcmMvSW1hZ2UtU2xpZGVyLmpzIiwid2VicGFjazovL2ltYWdlLXNsaWRlci8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJvcHRpb25zIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiY2FsbCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiYXJyYXlPZlBob3RvcyIsImltYWdlU2xpZGVyQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJudW1iZXJPZlBob3RvcyIsImN1cnJlbnRQaG90b051bWJlciIsInJpZ2h0UGhvdG9OdW1iZXIiLCJsZWZ0UGhvdG9OdW1iZXIiLCJuYXZDb250YWluZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJjaXJjbGVDbGljayIsImNpcmNsZU51bWJlciIsInBhcnNlSW50IiwiZGF0YXNldCIsImNpcmNsZSIsInRyYXZlbCIsInNldFRpbWVvdXQiLCJhZHZhbmNlUmlnaHQiLCJhZHZhbmNlTGVmdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsZWZ0QnV0dG9uIiwiaW5uZXJIVE1MIiwicmlnaHRCdXR0b24iLCJmb3JFYWNoIiwicGhvdG8iLCJwaG90b0RpdiIsImluZGV4T2YiLCJjcmVhdGVQaG90byIsImdldEN1cnJlbnREb20iLCJsZWZ0UGhvdG8iLCJjdXJyZW50UGhvdG8iLCJyaWdodFBob3RvIiwiY3VycmVudENpcmNsZSIsInN0b3BMb29wIiwidGhlTG9vcCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInJlbmRlclBob3RvU2xpZGVyIl0sIm1hcHBpbmdzIjoiaURBV0lBLEUsZ0VDUkFDLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFL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QStCaEV5QixJQUNBSSxFQUFjeEIsVUFBVUMsSUFBSSxnQkFDNUJvQixFQUFVckIsVUFBVUMsSUFBSSxhQUN4QnlCLEVBQVVDLFlBQVlsQixFQUFjLE1BR3RDSyxFQUFZSCxpQkFBaUIsUUFBU0YsR0FDdENHLEVBQVdELGlCQUFpQixRQUFTRCxHQUVyQyxJQUFJWSxFQUFlckYsU0FBU3lELGVBQWUsVUFDM0M0QixFQUFhdEIsVUFBVUMsSUFBSSxlQUMzQixJQUFJb0IsRUFBWXBGLFNBQVN5RCxlQUFlLFNBQVFDLEVBQWlCLElBQ2pFMEIsRUFBVXJCLFVBQVVDLElBQUksYUFDeEIsSUFBSXNCLEVBQWF0RixTQUFTeUQsZUFBZSxVQUN6QzZCLEVBQVd2QixVQUFVQyxJQUFJLGNBQ3pCLElBQUl1QixFQUFnQnZGLFNBQVN5RCxlQUFlLFNBQVNFLEtBQ3JENEIsRUFBY3hCLFVBQVVDLElBQUksZ0JBRTVCLElBQUl5QixFQUFVQyxZQUFZbEIsRUFBYyxLQUV4QyxNQUFNZ0IsRUFBVyxXQUNmRyxjQUFjRixJQy9HbEJHLENBRmdCLEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJodG1sIHsgXFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmltYWdlU2xpZGVyQ29udGFpbmVyIHtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGhlaWdodDogNTAwcHg7XFxuICB3aWR0aDogOTAwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4ubmF2Q29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlOyBcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3R0b206IDEwcHg7XFxuICBtYXJnaW4tbGVmdDogNTAlO1xcbn1cXG4ucGhvdG8ge1xcbiAgIG9iamVjdC1maXQ6IGNvdmVyO1xcbiAgIHdpZHRoOiA5MDBweDtcXG4gICBoZWlnaHQ6IDUgMDBweDtcXG59XFxuLmhpZGRlblBob3RvIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5jZW50ZXJQaG90byB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwcHg7XFxuICB0cmFuc2l0aW9uOiBsZWZ0IDFzO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG92ZXJmbG93OiBoaWRkZW5cXG59XFxuLmxlZnRQaG90byB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IC05MDBweDtcXG4gIHRvcDogMHB4O1xcbiAgdHJhbnNpdGlvbjogbGVmdCAxcztcXG59XFxuLnJpZ2h0UGhvdG8ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiA5MDBweDtcXG4gIHRvcDogMHB4O1xcbiAgdHJhbnNpdGlvbjogbGVmdCAxcztcXG59XFxuLmVtcHR5Q2lyY2xlIHtcXG4gIHdpZHRoOiAxNXB4O1xcbiAgaGVpZ2h0OiAxNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTA1LCAxMDUsIDEwNSwgMC43KTtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi5lbXB0eUNpcmNsZTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTc3LCAxNzcsIDE3Nyk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5maWxsZWRDaXJjbGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3NywgMTc3LCAxNzcpO1xcbiAgei1pbmRleDogMTtcXG59XFxuLmxlZnRCdXR0b24ge1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwNSwgMTA1LCAxMDUsIDAuNyk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDUwJTtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi5sZWZ0QnV0dG9uOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6cmdiYSg0NiwgNDYsIDQ2LCAwLjcpO1xcbn1cXG4ucmlnaHRCdXR0b24ge1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwNSwgMTA1LCAxMDUsIDAuNyk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDUwJTtcXG4gIHJpZ2h0OiAwcHg7XFxuICBmb250LXNpemU6IDQwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB6LWluZGV4OiAxO1xcbn1cXG4ucmlnaHRCdXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDQ2LCA0NiwgNDYsIDAuNyk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSx5Q0FBeUM7RUFDekMsWUFBWTtBQUNkO0FBQ0E7RUFDRSxZQUFZO0VBQ1osYUFBYTtFQUNiLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsb0NBQW9DO0VBQ3BDLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLFlBQVk7RUFDWixnQkFBZ0I7QUFDbEI7QUFDQTtHQUNHLGlCQUFpQjtHQUNqQixZQUFZO0dBQ1osY0FBYztBQUNqQjtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsT0FBTztFQUNQLFFBQVE7RUFDUixtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkI7QUFDRjtBQUNBO0VBQ0UsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osUUFBUTtFQUNSLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsUUFBUTtFQUNSLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsMENBQTBDO0VBQzFDLGtCQUFrQjtFQUNsQixVQUFVO0FBQ1o7QUFDQTtFQUNFLG9DQUFvQztFQUNwQyxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxvQ0FBb0M7RUFDcEMsVUFBVTtBQUNaO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLFlBQVk7RUFDWiwwQ0FBMEM7RUFDMUMsa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLFVBQVU7QUFDWjtBQUNBO0VBQ0UsZUFBZTtFQUNmLHNDQUFzQztBQUN4QztBQUNBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixZQUFZO0VBQ1osMENBQTBDO0VBQzFDLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsVUFBVTtFQUNWLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsVUFBVTtBQUNaO0FBQ0E7RUFDRSxlQUFlO0VBQ2Ysc0NBQXNDO0FBQ3hDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImh0bWwgeyBcXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uaW1hZ2VTbGlkZXJDb250YWluZXIge1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgaGVpZ2h0OiA1MDBweDtcXG4gIHdpZHRoOiA5MDBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5uYXZDb250YWluZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7IFxcbiAgZGlzcGxheTogZmxleDtcXG4gIGJvdHRvbTogMTBweDtcXG4gIG1hcmdpbi1sZWZ0OiA1MCU7XFxufVxcbi5waG90byB7XFxuICAgb2JqZWN0LWZpdDogY292ZXI7XFxuICAgd2lkdGg6IDkwMHB4O1xcbiAgIGhlaWdodDogNSAwMHB4O1xcbn1cXG4uaGlkZGVuUGhvdG8ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmNlbnRlclBob3RvIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDBweDtcXG4gIHRyYW5zaXRpb246IGxlZnQgMXM7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgb3ZlcmZsb3c6IGhpZGRlblxcbn1cXG4ubGVmdFBob3RvIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogLTkwMHB4O1xcbiAgdG9wOiAwcHg7XFxuICB0cmFuc2l0aW9uOiBsZWZ0IDFzO1xcbn1cXG4ucmlnaHRQaG90byB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDkwMHB4O1xcbiAgdG9wOiAwcHg7XFxuICB0cmFuc2l0aW9uOiBsZWZ0IDFzO1xcbn1cXG4uZW1wdHlDaXJjbGUge1xcbiAgd2lkdGg6IDE1cHg7XFxuICBoZWlnaHQ6IDE1cHg7XFxuICBib3JkZXItcmFkaXVzOiA1MHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMDUsIDEwNSwgMTA1LCAwLjcpO1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgei1pbmRleDogMTtcXG59XFxuLmVtcHR5Q2lyY2xlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzcsIDE3NywgMTc3KTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmZpbGxlZENpcmNsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTc3LCAxNzcsIDE3Nyk7XFxuICB6LWluZGV4OiAxO1xcbn1cXG4ubGVmdEJ1dHRvbiB7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTA1LCAxMDUsIDEwNSwgMC43KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogNTAlO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgei1pbmRleDogMTtcXG59XFxuLmxlZnRCdXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDQ2LCA0NiwgNDYsIDAuNyk7XFxufVxcbi5yaWdodEJ1dHRvbiB7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTA1LCAxMDUsIDEwNSwgMC43KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogNTAlO1xcbiAgcmlnaHQ6IDBweDtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi5yaWdodEJ1dHRvbjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDYsIDQ2LCA0NiwgMC43KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlKSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKSB7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiY29uc3QgcmVuZGVyUGhvdG9TbGlkZXIgPSBmdW5jdGlvbiByZW5kZXJQaG90b1NsaWRlcihhcnJheU9mUGhvdG9zKSB7XG4gIGNvbnN0IGltYWdlU2xpZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltYWdlU2xpZGVyQ29udGFpbmVyJyk7XG4gIGNvbnN0IG51bWJlck9mUGhvdG9zID0gYXJyYXlPZlBob3Rvcy5sZW5ndGg7XG4gIGxldCBjdXJyZW50UGhvdG9OdW1iZXIgPSAwO1xuICBsZXQgcmlnaHRQaG90b051bWJlciA9IDE7XG4gIGxldCBsZWZ0UGhvdG9OdW1iZXIgPSBudW1iZXJPZlBob3RvcyAtIDE7XG5cbiAgY29uc3QgbmF2Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG5hdkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCduYXZDb250YWluZXInKTtcbiAgaW1hZ2VTbGlkZXJDb250YWluZXIuYXBwZW5kQ2hpbGQobmF2Q29udGFpbmVyKTtcblxuICBjb25zdCBjaXJjbGVDbGljayA9IGZ1bmN0aW9uIGNpcmNsZUNsaWNrKGUpIHtcbiAgICBsZXQgY2lyY2xlTnVtYmVyID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5jaXJjbGUsIDEwKTtcbiAgICBpZiAoY2lyY2xlTnVtYmVyID09PSBjdXJyZW50UGhvdG9OdW1iZXIpIHJldHVybjtcbiAgICBpZiAoY3VycmVudFBob3RvTnVtYmVyIDwgY2lyY2xlTnVtYmVyKSB7XG4gICAgICBsZXQgdHJhdmVsID0gKGNpcmNsZU51bWJlciAtIGN1cnJlbnRQaG90b051bWJlcilcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhdmVsOyBpICs9IDEpe1xuICAgICAgICBzZXRUaW1lb3V0KGFkdmFuY2VSaWdodCwgaSAqIDUwMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHRyYXZlbCA9IChjdXJyZW50UGhvdG9OdW1iZXIgLSBjaXJjbGVOdW1iZXIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYXZlbDsgaSArPSAxKXtcbiAgICAgICAgc2V0VGltZW91dChhZHZhbmNlTGVmdCwgaSAqIDUwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZQaG90b3M7IGkgKz0gMSkge1xuICAgIGNvbnN0IGNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNpcmNsZS5jbGFzc0xpc3QuYWRkKCdlbXB0eUNpcmNsZScpO1xuICAgIGNpcmNsZS5pZCA9IGBjaXJjbGUke2l9YDtcbiAgICBjaXJjbGUuZGF0YXNldC5jaXJjbGUgPSBpO1xuICAgIG5hdkNvbnRhaW5lci5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICAgIGNpcmNsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNpcmNsZUNsaWNrKTtcbiAgfVxuICBjb25zdCBsZWZ0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGxlZnRCdXR0b24uY2xhc3NMaXN0LmFkZCgnbGVmdEJ1dHRvbicpO1xuICBsZWZ0QnV0dG9uLmlubmVySFRNTCA9ICcmIzEwMDk0Oyc7XG4gIGNvbnN0IHJpZ2h0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHJpZ2h0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3JpZ2h0QnV0dG9uJyk7XG4gIHJpZ2h0QnV0dG9uLmlubmVySFRNTCA9ICcmIzEwMDk1Oyc7XG4gIGltYWdlU2xpZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGxlZnRCdXR0b24pO1xuICBpbWFnZVNsaWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChyaWdodEJ1dHRvbik7XG5cbiAgYXJyYXlPZlBob3Rvcy5mb3JFYWNoKChwaG90bykgPT4ge1xuICAgIGNvbnN0IHBob3RvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcGhvdG9EaXYuY2xhc3NMaXN0LmFkZCgnaGlkZGVuUGhvdG8nKTtcbiAgICBwaG90b0Rpdi5pZCA9IGBwaG90byR7cGFyc2VJbnQoYXJyYXlPZlBob3Rvcy5pbmRleE9mKHBob3RvKSl9YDtcbiAgICBjb25zdCBjcmVhdGVQaG90byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGNyZWF0ZVBob3RvLnNyYyA9IHBob3RvO1xuICAgIGNyZWF0ZVBob3RvLmNsYXNzTGlzdC5hZGQoJ3Bob3RvJyk7XG4gICAgcGhvdG9EaXYuYXBwZW5kQ2hpbGQoY3JlYXRlUGhvdG8pO1xuICAgIGltYWdlU2xpZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHBob3RvRGl2KTtcbiAgfSlcblxuICBjb25zdCBnZXRQaG90b051bWJlcnNSaWdodCA9IGZ1bmN0aW9uIGdldFBob3RvTnVtYmVyc1JpZ2h0KCkge1xuICAgIGN1cnJlbnRQaG90b051bWJlciArPSAxO1xuICAgIGlmIChjdXJyZW50UGhvdG9OdW1iZXIgPj0gbnVtYmVyT2ZQaG90b3MpIHsgY3VycmVudFBob3RvTnVtYmVyID0gMDsgfVxuICAgIGxlZnRQaG90b051bWJlciArPSAxO1xuICAgIGlmIChsZWZ0UGhvdG9OdW1iZXIgPj0gbnVtYmVyT2ZQaG90b3MpIHsgbGVmdFBob3RvTnVtYmVyID0gMDsgfVxuICAgIHJpZ2h0UGhvdG9OdW1iZXIgKz0gMTtcbiAgICBpZiAocmlnaHRQaG90b051bWJlciA+PSBudW1iZXJPZlBob3RvcykgeyByaWdodFBob3RvTnVtYmVyID0gMDsgfVxuICB9O1xuICBjb25zdCBnZXRQaG90b051bWJlcnNMZWZ0ID0gZnVuY3Rpb24gZ2V0UGhvdG9OdW1iZXJzTGVmdCgpIHtcbiAgICBjdXJyZW50UGhvdG9OdW1iZXIgLT0gMTtcbiAgICBpZiAoY3VycmVudFBob3RvTnVtYmVyIDwgMCkgeyBjdXJyZW50UGhvdG9OdW1iZXIgPSBudW1iZXJPZlBob3RvcyAtIDE7IH1cbiAgICBsZWZ0UGhvdG9OdW1iZXIgLT0gMTtcbiAgICBpZiAobGVmdFBob3RvTnVtYmVyIDwgMCkgeyBsZWZ0UGhvdG9OdW1iZXIgPSBudW1iZXJPZlBob3RvcyAtIDE7IH1cbiAgICByaWdodFBob3RvTnVtYmVyIC09IDE7XG4gICAgaWYgKHJpZ2h0UGhvdG9OdW1iZXIgPCAwKSB7IHJpZ2h0UGhvdG9OdW1iZXIgPSBudW1iZXJPZlBob3RvcyAtIDE7IH1cbiAgfTtcbiAgY29uc3QgZ2V0Q3VycmVudERvbSA9IGZ1bmN0aW9uIGdldFBob3RvRG9tKCkge1xuICAgIGxlZnRQaG90byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwaG90byR7bGVmdFBob3RvTnVtYmVyfWApO1xuICAgIGN1cnJlbnRQaG90byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwaG90byR7Y3VycmVudFBob3RvTnVtYmVyfWApO1xuICAgIHJpZ2h0UGhvdG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcGhvdG8ke3JpZ2h0UGhvdG9OdW1iZXJ9YCk7XG4gICAgY3VycmVudENpcmNsZSAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY2lyY2xlJHtjdXJyZW50UGhvdG9OdW1iZXJ9YCk7XG4gIH07XG4gIGNvbnN0IGFkdmFuY2VSaWdodCA9IGZ1bmN0aW9uIGFkdmFuY2VSaWdodCgpIHtcbiAgICBzdG9wTG9vcCgpO1xuICAgIGN1cnJlbnRQaG90by5jbGFzc0xpc3QuYWRkKCdsZWZ0UGhvdG8nKTtcbiAgICByaWdodFBob3RvLmNsYXNzTGlzdC5hZGQoJ2NlbnRlclBob3RvJyk7XG4gICAgY3VycmVudFBob3RvLmNsYXNzTGlzdC5yZW1vdmUoJ2NlbnRlclBob3RvJyk7XG4gICAgcmlnaHRQaG90by5jbGFzc0xpc3QucmVtb3ZlKCdyaWdodFBob3RvJyk7XG4gICAgbGVmdFBob3RvLmNsYXNzTGlzdC5yZW1vdmUoJ2xlZnRQaG90bycpOyBcbiAgICBjdXJyZW50Q2lyY2xlLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpbGxlZENpcmNsZScpO1xuICAgIGdldFBob3RvTnVtYmVyc1JpZ2h0KCk7XG4gICAgZ2V0Q3VycmVudERvbSgpO1xuICAgIGN1cnJlbnRDaXJjbGUuY2xhc3NMaXN0LmFkZCgnZmlsbGVkQ2lyY2xlJyk7XG4gICAgcmlnaHRQaG90by5jbGFzc0xpc3QuYWRkKCdyaWdodFBob3RvJyk7XG4gICAgdGhlTG9vcCA9IHNldEludGVydmFsKGFkdmFuY2VSaWdodCwgNTAwMCk7XG4gIH07XG4gIGNvbnN0IGFkdmFuY2VMZWZ0ID0gZnVuY3Rpb24gYWR2YW5jZUxlZnQoKSB7XG4gICAgc3RvcExvb3AoKTtcbiAgICBjdXJyZW50UGhvdG8uY2xhc3NMaXN0LmFkZCgncmlnaHRQaG90bycpO1xuICAgIGxlZnRQaG90by5jbGFzc0xpc3QuYWRkKCdjZW50ZXJQaG90bycpO1xuICAgIGN1cnJlbnRQaG90by5jbGFzc0xpc3QucmVtb3ZlKCdjZW50ZXJQaG90bycpO1xuICAgIGxlZnRQaG90by5jbGFzc0xpc3QucmVtb3ZlKCdsZWZ0UGhvdG8nKTtcbiAgICByaWdodFBob3RvLmNsYXNzTGlzdC5yZW1vdmUoJ3JpZ2h0UGhvdG8nKTtcbiAgICBjdXJyZW50Q2lyY2xlLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpbGxlZENpcmNsZScpO1xuICAgIGdldFBob3RvTnVtYmVyc0xlZnQoKTtcbiAgICBnZXRDdXJyZW50RG9tKCk7XG4gICAgY3VycmVudENpcmNsZS5jbGFzc0xpc3QuYWRkKCdmaWxsZWRDaXJjbGUnKTtcbiAgICBsZWZ0UGhvdG8uY2xhc3NMaXN0LmFkZCgnbGVmdFBob3RvJyk7XG4gICAgdGhlTG9vcCA9IHNldEludGVydmFsKGFkdmFuY2VSaWdodCwgNTAwMCk7XG4gIH07XG5cbiAgcmlnaHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhZHZhbmNlUmlnaHQpO1xuICBsZWZ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWR2YW5jZUxlZnQpO1xuXG4gIGxldCBjdXJyZW50UGhvdG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvdG8wJyk7XG4gIGN1cnJlbnRQaG90by5jbGFzc0xpc3QuYWRkKCdjZW50ZXJQaG90bycpO1xuICBsZXQgbGVmdFBob3RvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHBob3RvJHtudW1iZXJPZlBob3RvcyAtIDF9YCk7XG4gIGxlZnRQaG90by5jbGFzc0xpc3QuYWRkKCdsZWZ0UGhvdG8nKTtcbiAgbGV0IHJpZ2h0UGhvdG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvdG8xJyk7XG4gIHJpZ2h0UGhvdG8uY2xhc3NMaXN0LmFkZCgncmlnaHRQaG90bycpO1xuICBsZXQgY3VycmVudENpcmNsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjaXJjbGUke2N1cnJlbnRQaG90b051bWJlcn1gKTtcbiAgY3VycmVudENpcmNsZS5jbGFzc0xpc3QuYWRkKCdmaWxsZWRDaXJjbGUnKTtcblxuICB2YXIgdGhlTG9vcCA9IHNldEludGVydmFsKGFkdmFuY2VSaWdodCwgNTAwMCk7XG5cbiAgY29uc3Qgc3RvcExvb3AgPSBmdW5jdGlvbiBzdG9wTG9vcCgpIHtcbiAgICBjbGVhckludGVydmFsKHRoZUxvb3ApO1xuICB9OyBcblxufTtcblxuZXhwb3J0IHsgcmVuZGVyUGhvdG9TbGlkZXIgfTtcbiIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IGltYWdlT25lIGZyb20gJy4vcGhvdG9zL0lNR18yNzY0LkpQRyc7XG5pbXBvcnQgaW1hZ2VUd28gZnJvbSAnLi9waG90b3MvSU1HXzI3NjUuSlBHJztcbmltcG9ydCBpbWFnZVRocmVlIGZyb20gJy4vcGhvdG9zL0lNR18yNzY3LkpQRyc7XG5pbXBvcnQgaW1hZ2VGb3VyIGZyb20gJy4vcGhvdG9zL0lNR18yNzY2LkpQRyc7XG5cbmltcG9ydCB7IHJlbmRlclBob3RvU2xpZGVyIH0gZnJvbSAnLi9JbWFnZS1TbGlkZXInO1xuXG5jb25zdCBwaG90b3MgID0gWyBpbWFnZU9uZSwgaW1hZ2VUd28sIGltYWdlVGhyZWUsIGltYWdlRm91ciBdO1xuXG5yZW5kZXJQaG90b1NsaWRlcihwaG90b3MpO1xuXG5cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9